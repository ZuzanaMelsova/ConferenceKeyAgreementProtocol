message Msg{
    enum Type{
        KEYAGREEMENTPART1 = 1;
        KEYAGREEMENTPART2 = 2;
        INITMSG = 3;
        ADDPARTICIPANT = 4;
        JOINING = 5;
        LEAVING = 6;
        NEWPERIOD = 7;



    }
    required int32 senderId = 1;
    required Type type = 2;
    optional KeyAgreementPart1 keyAgreementPart1 = 3;
    optional KeyAgreementPart2 keyAgreementPart2 = 4;
    optional InitMsg init = 5;
    //optional Joining joining = 6;
    optional AddParticipant addParticipant = 7;


    message KeyAgreementPart1{
        required bytes pubKeyY = 2;  // y = g^x mod p, where x is the sender`s long-term private key
        repeated bytes pubValuesGeneratedFromCoefficients = 3; // Ck = g^ak mod p, where ak is the kth coefficient of the sender`s secret polynomial
    }
    message KeyAgreementPart2{
        required bytes pubKeyR = 2; // r = g^k, where k is the sender`s secret random number different for each period
        repeated EncryptedSubKey encryptedSubKeys = 3; // sender`s f(z) x yj, jth member

        message EncryptedSubKey{
            required int32 id = 1; //id of the member who has the private key to decrypt it
            required bytes subKey = 2;
        }
    }
    message InitMsg{
        required bytes p = 1;
        required bytes q = 2;
        required bytes g = 3;
        repeated int32 id = 4;
    }
   /* message Joining{
        required KeyAgreementPart1 keyAgreementPart1 = 1;
        required KeyAgreementPart2 keyAgreementPart2 = 2;
    }*/
    message AddParticipant{
        required int32 nextPeriod = 4;
        required bytes p = 1;
        required bytes q = 2;
        required bytes g = 3;
        repeated PublicData publicData = 5;

        message PublicData{
            required int32 id = 1;
            required bytes pubKeyY = 2;  // y = g^x mod p, where x is the sender`s long-term private key
            repeated bytes pubValuesGeneratedFromCoefficients = 3;
        }
    }
}
